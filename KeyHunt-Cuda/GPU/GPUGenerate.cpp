/*
 * This file is part of the VanitySearch distribution (https://github.com/JeanLucPons/VanitySearch).
 * Copyright (c) 2019 Jean Luc PONS.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

#include "GPUEngine.h"
#include <cuda_runtime.h>
#if defined(CUDART_VERSION) && (CUDART_VERSION >= 12000)
#include <cuda.h>
#endif
#include <math.h>

// Configure persisting L2 cache for generator tables (Gx/Gy) when present
static void ConfigurePersistingL2(cudaStream_t stream, const void* base_ptr, size_t size_bytes) {
    if (!base_ptr || size_bytes == 0) return;
    cudaAccessPolicyWindow window{};
    window.base_ptr = const_cast<void*>(base_ptr);
    window.num_bytes = size_bytes;
    window.hitRatio = 1.0;
    window.hitProp = cudaAccessPropertyPersisting;
    window.missProp = cudaAccessPropertyStreaming;
    cudaStreamAttrValue attr{};
    attr.accessPolicyWindow = window;
    (void)cudaStreamSetAttribute(stream, cudaStreamAttributeAccessPolicyWindow, &attr);
}

// Preload kernels to avoid lazy-loading skew during first launches
static void WarmupKernelLoad(const void* func) {
    if (!func) return;
    cudaFuncAttributes attr{};
    cudaFuncGetAttributes(&attr, func);
}

// Entry point to configure G tables persistence; call this after allocating device tables
extern __device__ uint64_t* Gx;
extern __device__ uint64_t* Gy;

void KH_InitCudaOptimizations(cudaStream_t stream, size_t table_words) {
    uint64_t* h_Gx = nullptr; cudaMemcpyFromSymbol(&h_Gx, Gx, sizeof(h_Gx));
    uint64_t* h_Gy = nullptr; cudaMemcpyFromSymbol(&h_Gy, Gy, sizeof(h_Gy));
    const size_t bytes = table_words * sizeof(uint64_t);
    ConfigurePersistingL2(stream, h_Gx, bytes);
    ConfigurePersistingL2(stream, h_Gy, bytes);
    WarmupKernelLoad(nullptr);
}

void KH_LaunchWithDomain(const void* kernel, dim3 grid, dim3 block, void** args, size_t shm, cudaStream_t stream) {
#if CUDART_VERSION >= 12000
    cudaLaunchAttribute attr{};
    attr.id = cudaLaunchAttributeMemSyncDomain;
    attr.val.memSyncDomain = cudaLaunchMemSyncDomainDefault;
    cudaLaunchConfig_t cfg{};
    cfg.gridDim = grid;
    cfg.blockDim = block;
    cfg.dynamicSmemBytes = shm;
    cfg.stream = stream;
    cfg.attrs = &attr;
    cfg.numAttrs = 1;
    cudaLaunchKernelEx(&cfg, reinterpret_cast<cudaKernel_t>(const_cast<void*>(kernel)), args);
#else
    cudaLaunchKernel(kernel, grid, block, args, shm, stream);
#endif
}

using namespace std;


void GPUEngine::GenerateCode(Secp256K1 *secp, int size)
{

    // Compute generator table
    Point *Gn = new Point[size];
    Point g = secp->G;
    Gn[0] = g;
    g = secp->DoubleDirect(g);
    Gn[1] = g;
    for (int i = 2; i < size; i++) {
        g = secp->AddDirect(g, secp->G);
        Gn[i] = g;
    }
    // _2Gn = CPU_GRP_SIZE*G
    Point _2Gn = secp->DoubleDirect(Gn[size / 2 - 1]);

    // Write file
    FILE *f = fopen("GPU/GPUGroup.h", "w");

    fprintf(f, "// File generated by GPUEngine::GenerateCode()\n");
    fprintf(f, "// GROUP definitions\n");
    fprintf(f, "#define GRP_SIZE %d\n\n", size);
    fprintf(f, "// _2Gn = GRP_SIZE*G\n");
    fprintf(f, "__device__ __constant__ uint64_t _2Gnx[4] = %s;\n", _2Gn.x.GetC64Str(4).c_str());
    fprintf(f, "__device__ __constant__ uint64_t _2Gny[4] = %s;\n\n", _2Gn.y.GetC64Str(4).c_str());
    fprintf(f, "// SecpK1 Generator table (Contains G,2G,3G,...,(GRP_SIZE/2 )G)\n");
    fprintf(f, "__device__ __constant__ uint64_t Gx[][4] = {\n");
    for (int i = 0; i < size / 2; i++) {
        fprintf(f, "  %s,\n", Gn[i].x.GetC64Str(4).c_str());
    }
    fprintf(f, "};\n");

    fprintf(f, "__device__ __constant__ uint64_t Gy[][4] = {\n");
    for (int i = 0; i < size / 2; i++) {
        fprintf(f, "  %s,\n", Gn[i].y.GetC64Str(4).c_str());
    }
    fprintf(f, "};\n\n");

    fclose(f);
    delete[] Gn;

}
